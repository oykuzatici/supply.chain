# -*- coding: utf-8 -*-
"""coal_last.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ju9Tn-X85OZ-LHtCs_05_cOeXAj4T6A7
"""

# OPTIGUIDE DATA CODE GOES HERE

from gurobipy import Model, GRB

# Customer demand for two types of coal: negative and positive
demand_negative = {
    'customer1': 50,
    'customer2': 40
}

demand_positive = {
    'customer1': 60,
    'customer2': 30
}

# Supplier capacity limits
supplier_capacity = {
    'supplier1': 120,
    'supplier2': 100,
    'supplier3': 80
}

# Factory production capacity
factory_capacity = {
    'factory1': 140,
    'factory2': 120
}

# Shipping costs from supplier to factory
shipping_sf = {
    ('supplier1', 'factory1'): 4,
    ('supplier1', 'factory2'): 6,
    ('supplier2', 'factory1'): 5,
    ('supplier2', 'factory2'): 3,
    ('supplier3', 'factory1'): 7,
    ('supplier3', 'factory2'): 4
}

# Shipping costs from factory to customer
shipping_fc = {
    ('factory1', 'customer1'): 20,
    ('factory1', 'customer2'): 35,
    ('factory2', 'customer1'): 25,
    ('factory2', 'customer2'): 30
}

# Additional production cost per unit for each factory
production_cost_negative = {'factory1': 5, 'factory2': 5}
production_cost_positive = {'factory1': 8, 'factory2': 8}
base_cost = {'factory1': 39.39, 'factory2': 39.39}

# Model creation
model = Model("Coal_Distribution")

# Decision variables
# x: shipment from supplier to factory
# y_negative: shipment of negative coal from factory to customer
# y_positive: shipment of positive coal from factory to customer
x = model.addVars(shipping_sf.keys(), vtype=GRB.INTEGER, name="x")
y_negative = model.addVars(shipping_fc.keys(), vtype=GRB.INTEGER, name="y_negative")
y_positive = model.addVars(shipping_fc.keys(), vtype=GRB.INTEGER, name="y_positive")

# Supplier capacity constraints
for s in supplier_capacity:
    model.addConstr(
        sum(x[s, f] for f in factory_capacity) <= supplier_capacity[s],
        name=f"supplier_capacity_{s}"
    )

# Customer demand constraints (for both coal types)
for c in demand_negative:
    model.addConstr(
        sum(y_negative[f, c] for f in factory_capacity) >= demand_negative[c],
        name=f"demand_negative_{c}"
    )
    model.addConstr(
        sum(y_positive[f, c] for f in factory_capacity) >= demand_positive[c],
        name=f"demand_positive_{c}"
    )

# Factory capacity constraints (total of both coal types)
for f in factory_capacity:
    model.addConstr(
        sum(y_negative[f, c] + y_positive[f, c] for c in demand_negative) <= factory_capacity[f],
        name=f"factory_capacity_{f}"
    )

# Flow balance constraints: incoming coal equals outgoing coal for each factory
for f in factory_capacity:
    model.addConstr(
        sum(x[s, f] for s in supplier_capacity) ==
        sum(y_negative[f, c] + y_positive[f, c] for c in demand_negative),
        name=f"flow_balance_{f}"
    )

# Objective function: minimize total cost (shipping + production)
model.setObjective(
    sum(shipping_sf[sf] * x[sf] for sf in shipping_sf) +
    sum((shipping_fc[fc] + base_cost[fc[0]] + production_cost_negative[fc[0]]) * y_negative[fc] for fc in shipping_fc) +
    sum((shipping_fc[fc] + base_cost[fc[0]] + production_cost_positive[fc[0]]) * y_positive[fc] for fc in shipping_fc),
    GRB.MINIMIZE
)

# Solve the model
model.optimize()

# Display results if optimal solution is found
if model.status == GRB.OPTIMAL:
    print(f"✅ Optimal solution found. Total cost: {model.ObjVal:.2f}")
    for v in model.getVars():
        if v.X > 0:
            print(f"{v.VarName}: {v.X}")
else:
    print("❌ No feasible solution found.")
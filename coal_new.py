# -*- coding: utf-8 -*-
"""coal_new.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SEF3PfPsmBsCgEFpVy-u7xFanlSa8SiP
"""

code = """# OPTIGUIDE DATA CODE GOES HERE

capacity_in_supplier = {'supplier1': 120, 'supplier2': 100, 'supplier3': 80}

shipping_cost_from_supplier_to_factory = {
    ('supplier1', 'factory1'): 4,
    ('supplier1', 'factory2'): 6,
    ('supplier2', 'factory1'): 5,
    ('supplier2', 'factory2'): 3,
    ('supplier3', 'factory1'): 7,
    ('supplier3', 'factory2'): 4
}

cost_negatif = {'factory1': 39.39, 'factory2': 39.39}
cost_pozitif = {'factory1': 39.39, 'factory2': 39.39}

products = ['product1', 'product2']

shipping_cost_from_factory_to_product = {
    ('factory1', 'product1'): 20,
    ('factory1', 'product2'): 35,
    ('factory2', 'product1'): 25,
    ('factory2', 'product2'): 30,
}

negatif_needed_for_product = {
    'product1': 50,
    'product2': 40
}

pozitif_needed_for_product = {
    'product1': 60,
    'product2': 30
}

factories = list(set(i[1] for i in shipping_cost_from_supplier_to_factory.keys()))
suppliers = list(set(i[0] for i in shipping_cost_from_supplier_to_factory.keys()))

# OPTIGUIDE CONSTRAINT CODE GOES HERE

from gurobipy import GRB, Model

model = Model("coal_distribution")

x = model.addVars(shipping_cost_from_supplier_to_factory.keys(), vtype=GRB.INTEGER, name="x")
y_negatif = model.addVars(shipping_cost_from_factory_to_product.keys(), vtype=GRB.INTEGER, name="y_negatif")
y_pozitif = model.addVars(shipping_cost_from_factory_to_product.keys(), vtype=GRB.INTEGER, name="y_pozitif")

# Objective function: minimize total cost = supplier-to-factory shipping + factory processing + factory-to-product shipping
model.setObjective(
    sum(x[i] * shipping_cost_from_supplier_to_factory[i] for i in shipping_cost_from_supplier_to_factory.keys()) +
    sum(y_negatif[j] * cost_negatif[j[0]] + y_pozitif[j] * cost_pozitif[j[0]] for j in shipping_cost_from_factory_to_product.keys()) +
    sum((y_negatif[j] + y_pozitif[j]) * shipping_cost_from_factory_to_product[j] for j in shipping_cost_from_factory_to_product.keys()),
    GRB.MINIMIZE
)

# Flow conservation constraints: inflow = outflow at each factory
for r in factories:
    model.addConstr(
        sum(x[i] for i in shipping_cost_from_supplier_to_factory.keys() if i[1] == r) ==
        sum(y_negatif[j] + y_pozitif[j] for j in shipping_cost_from_factory_to_product.keys() if j[0] == r),
        f"flow_{r}"
    )

# Supplier capacity constraints
for s in suppliers:
    model.addConstr(
        sum(x[i] for i in shipping_cost_from_supplier_to_factory.keys() if i[0] == s) <= capacity_in_supplier[s],
        f"supply_{s}"
    )

# Product demand constraints
for p in products:
    model.addConstr(
        sum(y_negatif[j] for j in shipping_cost_from_factory_to_product.keys() if j[1] == p) >= negatif_needed_for_product[p],
        f"negatif_demand_{p}"
    )
    model.addConstr(
        sum(y_pozitif[j] for j in shipping_cost_from_factory_to_product.keys() if j[1] == p) >= pozitif_needed_for_product[p],
        f"pozitif_demand_{p}"
    )

# Optimize the model
model.optimize()

if model.status == GRB.OPTIMAL:
    print(f"Optimal total cost: {model.objVal}")
else:
    print(f"Optimal solution not found, status code: {model.status}")
"""